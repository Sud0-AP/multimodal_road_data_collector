// Mocks generated by Mockito 5.4.6 from annotations
// in multimodal_road_data_collector/test/features/calibration/data/repositories/calibration_repository_file_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:multimodal_road_data_collector/core/services/file_storage_service.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FileStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileStorageService extends _i1.Mock
    implements _i2.FileStorageService {
  MockFileStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> getDocumentsDirectoryPath() =>
      (super.noSuchMethod(
            Invocation.method(#getDocumentsDirectoryPath, []),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#getDocumentsDirectoryPath, []),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<String> getTemporaryDirectoryPath() =>
      (super.noSuchMethod(
            Invocation.method(#getTemporaryDirectoryPath, []),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#getTemporaryDirectoryPath, []),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<String?> getExternalStorageDirectoryPath() =>
      (super.noSuchMethod(
            Invocation.method(#getExternalStorageDirectoryPath, []),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<bool> writeStringToFile(String? content, String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#writeStringToFile, [content, filePath]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<String?> readStringFromFile(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#readStringFromFile, [filePath]),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<bool> writeBytesToFile(List<int>? bytes, String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#writeBytesToFile, [bytes, filePath]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<int>?> readBytesFromFile(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#readBytesFromFile, [filePath]),
            returnValue: _i3.Future<List<int>?>.value(),
          )
          as _i3.Future<List<int>?>);

  @override
  _i3.Future<bool> fileExists(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#fileExists, [filePath]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteFile(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFile, [filePath]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> createDirectory(String? directoryPath) =>
      (super.noSuchMethod(
            Invocation.method(#createDirectory, [directoryPath]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<String>> listFiles(String? directoryPath) =>
      (super.noSuchMethod(
            Invocation.method(#listFiles, [directoryPath]),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<List<String>> listFilesWithExtension(
    String? directoryPath,
    String? extension,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#listFilesWithExtension, [
              directoryPath,
              extension,
            ]),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<bool> copyFile(String? sourcePath, String? destinationPath) =>
      (super.noSuchMethod(
            Invocation.method(#copyFile, [sourcePath, destinationPath]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> moveFile(String? sourcePath, String? destinationPath) =>
      (super.noSuchMethod(
            Invocation.method(#moveFile, [sourcePath, destinationPath]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<int?> getFileSize(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#getFileSize, [filePath]),
            returnValue: _i3.Future<int?>.value(),
          )
          as _i3.Future<int?>);

  @override
  _i3.Future<int?> getAvailableStorage() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableStorage, []),
            returnValue: _i3.Future<int?>.value(),
          )
          as _i3.Future<int?>);

  @override
  _i3.Future<String?> exportFile(String? sourcePath, String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#exportFile, [sourcePath, fileName]),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);
}
