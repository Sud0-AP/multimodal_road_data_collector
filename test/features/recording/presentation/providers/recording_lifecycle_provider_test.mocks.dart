// Mocks generated by Mockito 5.4.6 from annotations
// in multimodal_road_data_collector/test/features/recording/presentation/providers/recording_lifecycle_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:multimodal_road_data_collector/features/recording/domain/managers/recording_session_manager.dart'
    as _i2;
import 'package:multimodal_road_data_collector/features/recording/domain/models/corrected_sensor_data_point.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [RecordingSessionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecordingSessionManager extends _i1.Mock
    implements _i2.RecordingSessionManager {
  MockRecordingSessionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onBufferFull(
    dynamic Function(List<_i3.CorrectedSensorDataPoint>)? _onBufferFull,
  ) => super.noSuchMethod(
    Invocation.setter(#onBufferFull, _onBufferFull),
    returnValueForMissingStub: null,
  );

  @override
  set onCsvWriteError(dynamic Function(String)? _onCsvWriteError) =>
      super.noSuchMethod(
        Invocation.setter(#onCsvWriteError, _onCsvWriteError),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void setSessionDirectory(String? sessionDirectory) => super.noSuchMethod(
    Invocation.method(#setSessionDirectory, [sessionDirectory]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Stream<_i2.ProcessedSensorData> getProcessedSensorStream() =>
      (super.noSuchMethod(
            Invocation.method(#getProcessedSensorStream, []),
            returnValue: _i4.Stream<_i2.ProcessedSensorData>.empty(),
          )
          as _i4.Stream<_i2.ProcessedSensorData>);

  @override
  _i4.Stream<_i2.CsvWriteResult> getCsvWriteStatusStream() =>
      (super.noSuchMethod(
            Invocation.method(#getCsvWriteStatusStream, []),
            returnValue: _i4.Stream<_i2.CsvWriteResult>.empty(),
          )
          as _i4.Stream<_i2.CsvWriteResult>);

  @override
  List<_i3.CorrectedSensorDataPoint> getBufferedDataPoints() =>
      (super.noSuchMethod(
            Invocation.method(#getBufferedDataPoints, []),
            returnValue: <_i3.CorrectedSensorDataPoint>[],
          )
          as List<_i3.CorrectedSensorDataPoint>);

  @override
  void clearBuffer() => super.noSuchMethod(
    Invocation.method(#clearBuffer, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<List<_i3.CorrectedSensorDataPoint>> flushBuffer() =>
      (super.noSuchMethod(
            Invocation.method(#flushBuffer, []),
            returnValue: _i4.Future<List<_i3.CorrectedSensorDataPoint>>.value(
              <_i3.CorrectedSensorDataPoint>[],
            ),
          )
          as _i4.Future<List<_i3.CorrectedSensorDataPoint>>);

  @override
  void setBufferFullCallback(
    dynamic Function(List<_i3.CorrectedSensorDataPoint>)? callback,
  ) => super.noSuchMethod(
    Invocation.method(#setBufferFullCallback, [callback]),
    returnValueForMissingStub: null,
  );

  @override
  void setCsvWriteErrorCallback(dynamic Function(String)? callback) =>
      super.noSuchMethod(
        Invocation.method(#setCsvWriteErrorCallback, [callback]),
        returnValueForMissingStub: null,
      );

  @override
  int getTotalRowsWritten() =>
      (super.noSuchMethod(
            Invocation.method(#getTotalRowsWritten, []),
            returnValue: 0,
          )
          as int);

  @override
  int getFailedWriteAttempts() =>
      (super.noSuchMethod(
            Invocation.method(#getFailedWriteAttempts, []),
            returnValue: 0,
          )
          as int);

  @override
  _i4.Future<bool> waitForPendingWrites({Duration? timeout}) =>
      (super.noSuchMethod(
            Invocation.method(#waitForPendingWrites, [], {#timeout: timeout}),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> startSensorDataCollection() =>
      (super.noSuchMethod(
            Invocation.method(#startSensorDataCollection, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> stopSensorDataCollection() =>
      (super.noSuchMethod(
            Invocation.method(#stopSensorDataCollection, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void setCalibrationParameters({
    double? accelZOffset = 0.0,
    double? gyroZOffset = 0.0,
    bool? swapXY = false,
  }) => super.noSuchMethod(
    Invocation.method(#setCalibrationParameters, [], {
      #accelZOffset: accelZOffset,
      #gyroZOffset: gyroZOffset,
      #swapXY: swapXY,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void setSessionCalibrationParameters({
    required double? sessionAccelOffsetZ,
    required double? gyroZDrift,
    required double? bumpThreshold,
    bool? useSessionParameters = true,
  }) => super.noSuchMethod(
    Invocation.method(#setSessionCalibrationParameters, [], {
      #sessionAccelOffsetZ: sessionAccelOffsetZ,
      #gyroZDrift: gyroZDrift,
      #bumpThreshold: bumpThreshold,
      #useSessionParameters: useSessionParameters,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void clearSessionCalibrationParameters() => super.noSuchMethod(
    Invocation.method(#clearSessionCalibrationParameters, []),
    returnValueForMissingStub: null,
  );

  @override
  bool isDataCollectionActive() =>
      (super.noSuchMethod(
            Invocation.method(#isDataCollectionActive, []),
            returnValue: false,
          )
          as bool);

  @override
  bool isInitialCalibrationDone() =>
      (super.noSuchMethod(
            Invocation.method(#isInitialCalibrationDone, []),
            returnValue: false,
          )
          as bool);

  @override
  _i4.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
