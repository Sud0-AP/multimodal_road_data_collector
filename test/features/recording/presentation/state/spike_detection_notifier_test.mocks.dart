// Mocks generated by Mockito 5.4.6 from annotations
// in multimodal_road_data_collector/test/features/recording/presentation/state/spike_detection_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:multimodal_road_data_collector/core/services/file_storage_service.dart'
    as _i4;
import 'package:multimodal_road_data_collector/core/services/spike_detection_service.dart'
    as _i2;
import 'package:multimodal_road_data_collector/features/recording/domain/models/corrected_sensor_data_point.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SpikeDetectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpikeDetectionService extends _i1.Mock
    implements _i2.SpikeDetectionService {
  MockSpikeDetectionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void initialize({
    required double? bumpThreshold,
    int? refractoryPeriodMs = 8000,
  }) => super.noSuchMethod(
    Invocation.method(#initialize, [], {
      #bumpThreshold: bumpThreshold,
      #refractoryPeriodMs: refractoryPeriodMs,
    }),
    returnValueForMissingStub: null,
  );

  @override
  bool detectSpike(_i3.CorrectedSensorDataPoint? dataPoint) =>
      (super.noSuchMethod(
            Invocation.method(#detectSpike, [dataPoint]),
            returnValue: false,
          )
          as bool);

  @override
  void reset() => super.noSuchMethod(
    Invocation.method(#reset, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [FileStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileStorageService extends _i1.Mock
    implements _i4.FileStorageService {
  MockFileStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> getDocumentsDirectoryPath() =>
      (super.noSuchMethod(
            Invocation.method(#getDocumentsDirectoryPath, []),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#getDocumentsDirectoryPath, []),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String> getTemporaryDirectoryPath() =>
      (super.noSuchMethod(
            Invocation.method(#getTemporaryDirectoryPath, []),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#getTemporaryDirectoryPath, []),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String?> getExternalStorageDirectoryPath() =>
      (super.noSuchMethod(
            Invocation.method(#getExternalStorageDirectoryPath, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<bool> writeStringToFile(String? content, String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#writeStringToFile, [content, filePath]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<String?> readStringFromFile(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#readStringFromFile, [filePath]),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<bool> writeBytesToFile(List<int>? bytes, String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#writeBytesToFile, [bytes, filePath]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<List<int>?> readBytesFromFile(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#readBytesFromFile, [filePath]),
            returnValue: _i5.Future<List<int>?>.value(),
          )
          as _i5.Future<List<int>?>);

  @override
  _i5.Future<bool> fileExists(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#fileExists, [filePath]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> deleteFile(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFile, [filePath]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> createDirectory(String? directoryPath) =>
      (super.noSuchMethod(
            Invocation.method(#createDirectory, [directoryPath]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<List<String>> listFiles(String? directoryPath) =>
      (super.noSuchMethod(
            Invocation.method(#listFiles, [directoryPath]),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  _i5.Future<List<String>> listFilesWithExtension(
    String? directoryPath,
    String? extension,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#listFilesWithExtension, [
              directoryPath,
              extension,
            ]),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  _i5.Future<bool> copyFile(String? sourcePath, String? destinationPath) =>
      (super.noSuchMethod(
            Invocation.method(#copyFile, [sourcePath, destinationPath]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> moveFile(String? sourcePath, String? destinationPath) =>
      (super.noSuchMethod(
            Invocation.method(#moveFile, [sourcePath, destinationPath]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<int?> getFileSize(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#getFileSize, [filePath]),
            returnValue: _i5.Future<int?>.value(),
          )
          as _i5.Future<int?>);

  @override
  _i5.Future<int?> getAvailableStorage() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableStorage, []),
            returnValue: _i5.Future<int?>.value(),
          )
          as _i5.Future<int?>);

  @override
  _i5.Future<String?> exportFile(String? sourcePath, String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#exportFile, [sourcePath, fileName]),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<String> createNewSessionDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#createNewSessionDirectory, []),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#createNewSessionDirectory, []),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<bool> writeMetadata(
    String? metadataContent,
    String? sessionPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#writeMetadata, [metadataContent, sessionPath]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<Map<String, String>?> readMetadataSummary(
    String? sessionPath, [
    List<String>? keysToRead,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#readMetadataSummary, [sessionPath, keysToRead]),
            returnValue: _i5.Future<Map<String, String>?>.value(),
          )
          as _i5.Future<Map<String, String>?>);

  @override
  _i5.Future<List<String>> listRecordingSessionPaths() =>
      (super.noSuchMethod(
            Invocation.method(#listRecordingSessionPaths, []),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  _i5.Future<List<String>> getSessionFilePathsForSharing(String? sessionPath) =>
      (super.noSuchMethod(
            Invocation.method(#getSessionFilePathsForSharing, [sessionPath]),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  _i5.Future<bool> deleteDirectoryRecursive(String? directoryPath) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDirectoryRecursive, [directoryPath]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> openDirectoryInFileExplorer(String? directoryPath) =>
      (super.noSuchMethod(
            Invocation.method(#openDirectoryInFileExplorer, [directoryPath]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<String> createSessionDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#createSessionDirectory, []),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#createSessionDirectory, []),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String> getSessionsBaseDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getSessionsBaseDirectory, []),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#getSessionsBaseDirectory, []),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String> saveVideoToSession(
    String? videoPath,
    String? sessionDirectory,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveVideoToSession, [
              videoPath,
              sessionDirectory,
            ]),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#saveVideoToSession, [
                  videoPath,
                  sessionDirectory,
                ]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<List<String>> listSessions() =>
      (super.noSuchMethod(
            Invocation.method(#listSessions, []),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  _i5.Future<bool> createCsvWithHeader(
    String? filePath,
    List<String>? headerColumns,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createCsvWithHeader, [filePath, headerColumns]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> appendToCsv(String? filePath, List<String>? rows) =>
      (super.noSuchMethod(
            Invocation.method(#appendToCsv, [filePath, rows]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<String> getSensorDataCsvPath(
    String? sessionDirectory, {
    bool? createIfNotExists = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getSensorDataCsvPath,
              [sessionDirectory],
              {#createIfNotExists: createIfNotExists},
            ),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(
                  #getSensorDataCsvPath,
                  [sessionDirectory],
                  {#createIfNotExists: createIfNotExists},
                ),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<bool> appendToSensorDataCsv(
    String? sessionDirectory,
    List<_i3.CorrectedSensorDataPoint>? dataPoints,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#appendToSensorDataCsv, [
              sessionDirectory,
              dataPoints,
            ]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<String> getAnnotationsLogPath(
    String? sessionDirectory, {
    bool? createIfNotExists = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getAnnotationsLogPath,
              [sessionDirectory],
              {#createIfNotExists: createIfNotExists},
            ),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(
                  #getAnnotationsLogPath,
                  [sessionDirectory],
                  {#createIfNotExists: createIfNotExists},
                ),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<bool> logAnnotation(
    String? sessionDirectory,
    int? spikeTimestampMs,
    String? feedbackType,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#logAnnotation, [
              sessionDirectory,
              spikeTimestampMs,
              feedbackType,
            ]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);
}
